'use client';

import { useState, useEffect } from 'react';
import { createClient } from '@/libs/supabase/client';

export default function GmailSetup() {
  const [gmailIntegration, setGmailIntegration] = useState(null);
  const [loading, setLoading] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [isConnected, setIsConnected] = useState(false);
  const [keywords, setKeywords] = useState(['feedback', 'bug', 'feature request']);
  const [isLoading, setIsLoading] = useState(false);
  const [lastSync, setLastSync] = useState(null);

  const supabase = createClient();

  // useEffect –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    checkConnection();
  }, []);

  const checkConnection = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user } } = await supabase.auth.getUser();
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
      if (!user) {
        setIsConnected(false);
        return;
      }
      
      // –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ integrations
      const { data: integration, error } = await supabase
        .from('integrations')
        .select('*')
        .eq('user_id', user.id)
        .eq('platform', 'gmail')
        .eq('status', 'connected')
        .single();
        
      if (error && error.code !== 'PGRST116') {
        // PGRST116 = No rows found
        console.error('Error checking connection:', error);
      }
      
      if (integration) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isConnected –≤ true
        setIsConnected(true);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        setGmailIntegration(integration);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º keywords –∏–∑ config
        if (integration.config?.keywords && Array.isArray(integration.config.keywords)) {
          setKeywords(integration.config.keywords);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lastSync
        if (integration.last_sync) {
          setLastSync(integration.last_sync);
        }
      } else {
        // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        setIsConnected(false);
        setGmailIntegration(null);
        setLastSync(null);
      }
    } catch (error) {
      console.error('Error in checkConnection:', error);
      setIsConnected(false);
    } finally {
      setLoading(false);
    }
  };

  // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
  const checkGmailIntegration = checkConnection;

  const handleConnect = () => {
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isLoading: true
    setIsLoading(true);
    
    // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
    window.location.href = '/api/auth/gmail';
  };
  
  // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
  const handleConnectGmail = handleConnect;

  const handleSync = async () => {
    try {
      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isLoading: true
      setIsLoading(true);
      
      // –í—ã–ø–æ–ª–Ω–∏—Ç—å POST –∑–∞–ø—Ä–æ—Å –∫ /api/sync/gmail
      const response = await fetch('/api/sync/gmail', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
      
      // –í—ã–∑–≤–∞—Ç—å checkConnection() –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      await checkConnection();
      
      alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('Error in handleSync:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    } finally {
      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isLoading: false
      setIsLoading(false);
    }
  };

  const handleDisconnectGmail = async () => {
    if (!gmailIntegration) return;

    try {
      setIsLoading(true);
      const { error } = await supabase
        .from('integrations')
        .update({ 
          status: 'disconnected',
          updated_at: new Date().toISOString()
        })
        .eq('id', gmailIntegration.id);

      if (error) throw error;

      setGmailIntegration(null);
      setIsConnected(false);
      setLastSync(null);
      alert('Gmail –æ—Ç–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('Error disconnecting Gmail:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Gmail');
    } finally {
      setIsLoading(false);
    }
  };

  const updateKeywords = async (newKeywords) => {
    try {
      setIsLoading(true);
      
      // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ supabase.auth.getUser()
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û–±–Ω–æ–≤–∏—Ç—å config –≤ integrations
      const { error } = await supabase
        .from('integrations')
        .update({ 
          config: { keywords: newKeywords },
          updated_at: new Date().toISOString()
        })
        .eq('user_id', user.id)
        .eq('platform', 'gmail');

      if (error) throw error;

      setKeywords(newKeywords);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ gmailIntegration
      if (gmailIntegration) {
        setGmailIntegration({
          ...gmailIntegration,
          config: { ...gmailIntegration.config, keywords: newKeywords }
        });
      }
    } catch (error) {
      console.error('Error updating keywords:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddKeyword = (keyword) => {
    if (keyword && !keywords.includes(keyword)) {
      updateKeywords([...keywords, keyword]);
    }
  };

  const handleRemoveKeyword = (keyword) => {
    updateKeywords(keywords.filter(k => k !== keyword));
  };

  if (loading) {
    return (
      <div className="p-6 bg-white rounded-lg border">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/3 mb-4"></div>
          <div className="h-4 bg-gray-200 rounded w-2/3"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-white rounded-lg border">
      {/* Header —Å –∏–∫–æ–Ω–∫–æ–π Gmail, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className="text-2xl">üìß</div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Gmail</h3>
            <p className="text-sm text-gray-500">
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Gmail –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            </p>
          </div>
        </div>
        
        {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫—É Sync, –∏–Ω–∞—á–µ - –∫–Ω–æ–ø–∫—É Connect */}
        <div className="flex items-center space-x-2">
          {isConnected ? (
            <div className="flex items-center space-x-2">
              <span className="px-2 py-1 text-xs font-medium text-green-600 bg-green-100 rounded-full">
                –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
              </span>
              <button
                onClick={handleSync}
                disabled={isLoading}
                className="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                {isLoading ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : 'Sync'}
              </button>
              <button
                onClick={handleDisconnectGmail}
                disabled={isLoading}
                className="px-3 py-1 text-sm text-red-600 border border-red-300 rounded hover:bg-red-50 disabled:opacity-50"
              >
                {isLoading ? '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...' : '–û—Ç–∫–ª—é—á–∏—Ç—å'}
              </button>
            </div>
          ) : (
            <button
              onClick={handleConnect}
              disabled={isLoading}
              className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
            >
              {isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 'Connect'}
            </button>
          )}
        </div>
      </div>

      {/* –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω: —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è keywords —Å onBlur –≤—ã–∑–æ–≤–æ–º updateKeywords */}
      {isConnected && (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="text-sm font-medium text-gray-900 mb-2">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</h4>
          <div className="flex flex-wrap gap-2 mb-3">
            {keywords.map((keyword, index) => (
              <span 
                key={index}
                className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-700"
              >
                {keyword}
                <button
                  onClick={() => handleRemoveKeyword(keyword)}
                  disabled={isLoading}
                  className="ml-2 text-blue-500 hover:text-blue-700 disabled:opacity-50"
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
          <div className="flex gap-2">
            <input
              type="text"
              placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
              className="flex-1 px-3 py-1 border rounded-md text-sm disabled:opacity-50"
              onBlur={(e) => {
                if (e.target.value.trim()) {
                  handleAddKeyword(e.target.value.trim());
                  e.target.value = '';
                }
              }}
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  if (e.target.value.trim()) {
                    handleAddKeyword(e.target.value.trim());
                    e.target.value = '';
                  }
                }
              }}
              disabled={isLoading}
            />
            <button
              onClick={() => {
                const input = document.querySelector('input[type="text"]');
                if (input.value.trim()) {
                  handleAddKeyword(input.value.trim());
                  input.value = '';
                }
              }}
              disabled={isLoading}
              className="px-4 py-1 bg-blue-500 text-white rounded-md text-sm hover:bg-blue-600 disabled:opacity-50"
            >
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ü–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å */}
      {isConnected && (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="text-sm font-medium text-gray-900 mb-2">–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</h4>
          <div className="text-sm text-gray-600">
            {lastSync ? (
              <div>
                <span className="font-medium">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span> {new Date(lastSync).toLocaleString()}
              </div>
            ) : (
              <div>
                <span className="font-medium">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span> <span className="text-gray-400">–ï—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å</span>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      {!isConnected && (
        <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h4 className="text-sm font-medium text-blue-900 mb-2">–ß—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–æ:</h4>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ –ß—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º –∏–∑ –ø–∞–ø–∫–∏ INBOX</li>
            <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</li>
            <li>‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å</li>
            <li>‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</li>
          </ul>
        </div>
      )}
    </div>
  );
}