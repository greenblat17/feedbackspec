import { useState } from "react";
import toast from "react-hot-toast";

export default function AIDemoComponent() {
  const [demoFeedback, setDemoFeedback] = useState("");
  const [analyzing, setAnalyzing] = useState(false);
  const [results, setResults] = useState(null);

  const sampleFeedback = [
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ò–Ω–æ–≥–¥–∞ –¥–æ 30 —Å–µ–∫—É–Ω–¥ –∂–¥–µ—à—å.",
    "–û–±–æ–∂–∞—é –Ω–æ–≤—É—é —Ç–µ–º–Ω—É—é —Ç–µ–º—É! –ì–ª–∞–∑–∞ –Ω–µ —É—Å—Ç–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—á—å—é.",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–∞—à–∏—Ç—Å—è –Ω–∞ iPhone 12 –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
    "–ë—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö.",
    "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π, –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.",
    "–û—á–µ–Ω—å –ø–ª–æ—Ö–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å—ã –ø–∏–∫. –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
    "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –æ—á–µ–Ω—å –Ω–µ—É–¥–æ–±–Ω–æ.",
    "–ù—É–∂–Ω–∞ –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–µ–±-–≤–µ—Ä—Å–∏—è –Ω–µ—É–¥–æ–±–Ω–∞—è.",
  ];

  const testAIAnalysis = async () => {
    if (!demoFeedback.trim()) {
      toast.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
      return;
    }

    setAnalyzing(true);
    setResults(null);

    try {
      const response = await fetch("/api/feedback", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title: "Demo Feedback",
          content: demoFeedback,
          source: "manual",
          priority: "medium",
          category: "general",
          tags: ["demo", "ai-test"],
        }),
      });

      const result = await response.json();

      if (result.success) {
        setResults(result.data);
        toast.success("AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
      } else {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: " + result.message);
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ");
    } finally {
      setAnalyzing(false);
    }
  };

  return (
    <div className="card bg-base-100 shadow-xl max-w-4xl mx-auto">
      <div className="card-body">
        <h2 className="card-title text-2xl mb-4">
          ü§ñ AI Feedback Analysis Demo
        </h2>

        <div className="space-y-4">
          {/* Sample feedback buttons */}
          <div>
            <p className="font-medium mb-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤:</p>
            <div className="flex flex-wrap gap-2">
              {sampleFeedback.map((sample, index) => (
                <button
                  key={index}
                  className="btn btn-sm btn-outline"
                  onClick={() => setDemoFeedback(sample)}
                >
                  –ü—Ä–∏–º–µ—Ä {index + 1}
                </button>
              ))}
            </div>
          </div>

          {/* Input area */}
          <div>
            <label className="label">
              <span className="label-text font-medium">–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</span>
            </label>
            <textarea
              className="textarea textarea-bordered w-full h-24"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞..."
              value={demoFeedback}
              onChange={(e) => setDemoFeedback(e.target.value)}
            />
          </div>

          {/* Analyze button */}
          <button
            className={`btn btn-primary w-full ${analyzing ? "loading" : ""}`}
            onClick={testAIAnalysis}
            disabled={analyzing || !demoFeedback.trim()}
          >
            {analyzing ? "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..." : "üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å AI"}
          </button>

          {/* Results */}
          {results && (
            <div className="bg-base-200 rounded-lg p-4 space-y-4">
              <h3 className="font-bold text-lg">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞:</h3>

              {results.aiAnalysis ? (
                <div className="space-y-3">
                  {/* Sentiment */}
                  <div className="flex justify-between items-center">
                    <span className="font-medium">Sentiment:</span>
                    <span
                      className={`badge ${
                        results.aiAnalysis.sentiment === "positive"
                          ? "badge-success"
                          : results.aiAnalysis.sentiment === "negative"
                          ? "badge-error"
                          : "badge-info"
                      }`}
                    >
                      {results.aiAnalysis.sentiment === "positive"
                        ? "üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
                        : results.aiAnalysis.sentiment === "negative"
                        ? "üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
                        : "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"}
                    </span>
                  </div>

                  {/* Score */}
                  <div className="flex justify-between items-center">
                    <span className="font-medium">–û—Ü–µ–Ω–∫–∞:</span>
                    <span className="badge badge-outline">
                      {results.aiAnalysis.sentimentScore?.toFixed(2) || "N/A"}
                    </span>
                  </div>

                  {/* AI Priority */}
                  <div className="flex justify-between items-center">
                    <span className="font-medium">AI –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
                    <span
                      className={`badge ${
                        results.aiAnalysis.priority === "high"
                          ? "badge-error"
                          : results.aiAnalysis.priority === "medium"
                          ? "badge-warning"
                          : "badge-info"
                      }`}
                    >
                      {results.aiAnalysis.priority}
                    </span>
                  </div>

                  {/* Categories */}
                  {results.aiAnalysis.categories &&
                    results.aiAnalysis.categories.length > 0 && (
                      <div>
                        <span className="font-medium">AI –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</span>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {results.aiAnalysis.categories.map((cat, idx) => (
                            <span
                              key={idx}
                              className="badge badge-primary badge-sm"
                            >
                              {cat}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                  {/* Themes */}
                  {results.aiAnalysis.themes &&
                    results.aiAnalysis.themes.length > 0 && (
                      <div>
                        <span className="font-medium">–¢–µ–º—ã:</span>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {results.aiAnalysis.themes.map((theme, idx) => (
                            <span
                              key={idx}
                              className="badge badge-outline badge-sm"
                            >
                              {theme}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                  {/* Summary */}
                  {results.aiAnalysis.summary && (
                    <div>
                      <span className="font-medium">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</span>
                      <p className="text-sm mt-1 bg-base-100 p-2 rounded">
                        {results.aiAnalysis.summary}
                      </p>
                    </div>
                  )}

                  {/* Actionable Insights */}
                  {results.aiAnalysis.actionableInsights &&
                    results.aiAnalysis.actionableInsights.length > 0 && (
                      <div>
                        <span className="font-medium">–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:</span>
                        <ul className="text-sm mt-1 space-y-1">
                          {results.aiAnalysis.actionableInsights.map(
                            (insight, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span className="text-info">‚Ä¢</span>
                                <span>{insight}</span>
                              </li>
                            )
                          )}
                        </ul>
                      </div>
                    )}

                  {/* Suggested Actions */}
                  {results.aiAnalysis.suggestedActions &&
                    results.aiAnalysis.suggestedActions.length > 0 && (
                      <div>
                        <span className="font-medium">
                          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                        </span>
                        <ul className="text-sm mt-1 space-y-1">
                          {results.aiAnalysis.suggestedActions.map(
                            (action, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span className="text-success">‚Üí</span>
                                <span>{action}</span>
                              </li>
                            )
                          )}
                        </ul>
                      </div>
                    )}
                </div>
              ) : (
                <div className="text-center py-4">
                  <span className="text-warning">AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span>
                  <p className="text-sm text-base-content/70 mt-1">
                    –°—Ç–∞—Ç—É—Å: {results.aiAnalysisStatus || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
                  </p>
                </div>
              )}

              {/* Duplicate Check */}
              {results.duplicateCheck?.isDuplicate && (
                <div className="alert alert-warning">
                  <div>
                    <h4 className="font-bold">–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ö–æ–∂–∏–π –æ—Ç–∑—ã–≤!</h4>
                    <p className="text-sm">
                      {results.duplicateCheck.explanation}
                    </p>
                    <p className="text-xs">
                      –°—Ö–æ–∂–µ—Å—Ç—å:{" "}
                      {(results.duplicateCheck.similarityScore * 100).toFixed(
                        1
                      )}
                      %
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
